#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'inicis_types'

module Inicis
  class Client
    include ::Thrift::Client

    def getTimestamp()
      send_getTimestamp()
      return recv_getTimestamp()
    end

    def send_getTimestamp()
      send_message('getTimestamp', GetTimestamp_args)
    end

    def recv_getTimestamp()
      result = receive_message(GetTimestamp_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getTimestamp failed: unknown result')
    end

    def makeSignature(oid, price, timestamp)
      send_makeSignature(oid, price, timestamp)
      return recv_makeSignature()
    end

    def send_makeSignature(oid, price, timestamp)
      send_message('makeSignature', MakeSignature_args, :oid => oid, :price => price, :timestamp => timestamp)
    end

    def recv_makeSignature()
      result = receive_message(MakeSignature_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'makeSignature failed: unknown result')
    end

    def makePaymentAproveSignature(authToken, timestamp)
      send_makePaymentAproveSignature(authToken, timestamp)
      return recv_makePaymentAproveSignature()
    end

    def send_makePaymentAproveSignature(authToken, timestamp)
      send_message('makePaymentAproveSignature', MakePaymentAproveSignature_args, :authToken => authToken, :timestamp => timestamp)
    end

    def recv_makePaymentAproveSignature()
      result = receive_message(MakePaymentAproveSignature_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'makePaymentAproveSignature failed: unknown result')
    end

    def makeHash(signKey)
      send_makeHash(signKey)
      return recv_makeHash()
    end

    def send_makeHash(signKey)
      send_message('makeHash', MakeHash_args, :signKey => signKey)
    end

    def recv_makeHash()
      result = receive_message(MakeHash_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'makeHash failed: unknown result')
    end

    def getAuthenticationResult(data, url)
      send_getAuthenticationResult(data, url)
      return recv_getAuthenticationResult()
    end

    def send_getAuthenticationResult(data, url)
      send_message('getAuthenticationResult', GetAuthenticationResult_args, :data => data, :url => url)
    end

    def recv_getAuthenticationResult()
      result = receive_message(GetAuthenticationResult_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAuthenticationResult failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_getTimestamp(seqid, iprot, oprot)
      args = read_args(iprot, GetTimestamp_args)
      result = GetTimestamp_result.new()
      result.success = @handler.getTimestamp()
      write_result(result, oprot, 'getTimestamp', seqid)
    end

    def process_makeSignature(seqid, iprot, oprot)
      args = read_args(iprot, MakeSignature_args)
      result = MakeSignature_result.new()
      result.success = @handler.makeSignature(args.oid, args.price, args.timestamp)
      write_result(result, oprot, 'makeSignature', seqid)
    end

    def process_makePaymentAproveSignature(seqid, iprot, oprot)
      args = read_args(iprot, MakePaymentAproveSignature_args)
      result = MakePaymentAproveSignature_result.new()
      result.success = @handler.makePaymentAproveSignature(args.authToken, args.timestamp)
      write_result(result, oprot, 'makePaymentAproveSignature', seqid)
    end

    def process_makeHash(seqid, iprot, oprot)
      args = read_args(iprot, MakeHash_args)
      result = MakeHash_result.new()
      result.success = @handler.makeHash(args.signKey)
      write_result(result, oprot, 'makeHash', seqid)
    end

    def process_getAuthenticationResult(seqid, iprot, oprot)
      args = read_args(iprot, GetAuthenticationResult_args)
      result = GetAuthenticationResult_result.new()
      result.success = @handler.getAuthenticationResult(args.data, args.url)
      write_result(result, oprot, 'getAuthenticationResult', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class GetTimestamp_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetTimestamp_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeSignature_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    OID = 1
    PRICE = 2
    TIMESTAMP = 3

    FIELDS = {
      OID => {:type => ::Thrift::Types::STRING, :name => 'oid'},
      PRICE => {:type => ::Thrift::Types::STRING, :name => 'price'},
      TIMESTAMP => {:type => ::Thrift::Types::STRING, :name => 'timestamp'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeSignature_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakePaymentAproveSignature_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    AUTHTOKEN = 1
    TIMESTAMP = 2

    FIELDS = {
      AUTHTOKEN => {:type => ::Thrift::Types::STRING, :name => 'authToken'},
      TIMESTAMP => {:type => ::Thrift::Types::STRING, :name => 'timestamp'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakePaymentAproveSignature_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeHash_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SIGNKEY = 1

    FIELDS = {
      SIGNKEY => {:type => ::Thrift::Types::STRING, :name => 'signKey'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeHash_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAuthenticationResult_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DATA = 1
    URL = 2

    FIELDS = {
      DATA => {:type => ::Thrift::Types::MAP, :name => 'data', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
      URL => {:type => ::Thrift::Types::STRING, :name => 'url'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAuthenticationResult_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

